// Generated by gencpp from file control/ControlDebug.msg
// DO NOT EDIT!


#ifndef CONTROL_MESSAGE_CONTROLDEBUG_H
#define CONTROL_MESSAGE_CONTROLDEBUG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Pose.h>

namespace control
{
template <class ContainerAllocator>
struct ControlDebug_
{
  typedef ControlDebug_<ContainerAllocator> Type;

  ControlDebug_()
    : header()
    , CurrentSpeed(0.0)
    , TargetSpeed(0.0)
    , SpeedError(0.0)
    , AccelerationCmd(0.0)
    , Curvature(0.0)
    , LatError(0.0)
    , DirError(0.0)
    , SteeringAngleCmd(0.0)
    , CurvatureContribution(0.0)
    , LatContribution(0.0)
    , DirContribution(0.0)
    , CurrentPose()  {
    }
  ControlDebug_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , CurrentSpeed(0.0)
    , TargetSpeed(0.0)
    , SpeedError(0.0)
    , AccelerationCmd(0.0)
    , Curvature(0.0)
    , LatError(0.0)
    , DirError(0.0)
    , SteeringAngleCmd(0.0)
    , CurvatureContribution(0.0)
    , LatContribution(0.0)
    , DirContribution(0.0)
    , CurrentPose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _CurrentSpeed_type;
  _CurrentSpeed_type CurrentSpeed;

   typedef double _TargetSpeed_type;
  _TargetSpeed_type TargetSpeed;

   typedef double _SpeedError_type;
  _SpeedError_type SpeedError;

   typedef double _AccelerationCmd_type;
  _AccelerationCmd_type AccelerationCmd;

   typedef double _Curvature_type;
  _Curvature_type Curvature;

   typedef double _LatError_type;
  _LatError_type LatError;

   typedef double _DirError_type;
  _DirError_type DirError;

   typedef double _SteeringAngleCmd_type;
  _SteeringAngleCmd_type SteeringAngleCmd;

   typedef double _CurvatureContribution_type;
  _CurvatureContribution_type CurvatureContribution;

   typedef double _LatContribution_type;
  _LatContribution_type LatContribution;

   typedef double _DirContribution_type;
  _DirContribution_type DirContribution;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _CurrentPose_type;
  _CurrentPose_type CurrentPose;





  typedef boost::shared_ptr< ::control::ControlDebug_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::control::ControlDebug_<ContainerAllocator> const> ConstPtr;

}; // struct ControlDebug_

typedef ::control::ControlDebug_<std::allocator<void> > ControlDebug;

typedef boost::shared_ptr< ::control::ControlDebug > ControlDebugPtr;
typedef boost::shared_ptr< ::control::ControlDebug const> ControlDebugConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::control::ControlDebug_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::control::ControlDebug_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'control': ['/home/auto/Control/src/control/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::control::ControlDebug_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::control::ControlDebug_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::ControlDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::control::ControlDebug_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::ControlDebug_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::control::ControlDebug_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::control::ControlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "56d46489b2fb811d53877106c35e508e";
  }

  static const char* value(const ::control::ControlDebug_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x56d46489b2fb811dULL;
  static const uint64_t static_value2 = 0x53877106c35e508eULL;
};

template<class ContainerAllocator>
struct DataType< ::control::ControlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "control/ControlDebug";
  }

  static const char* value(const ::control::ControlDebug_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::control::ControlDebug_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n\
\n\
float64 CurrentSpeed                     # m/s\n\
float64 TargetSpeed                      # m/s\n\
float64 SpeedError                       # m/s\n\
float64 AccelerationCmd                  # m/ss\n\
float64 Curvature                        # rad\n\
float64 LatError                         # m\n\
float64 DirError                         # rad\n\
float64 SteeringAngleCmd                 # rad\n\
float64 CurvatureContribution            # rad\n\
float64 LatContribution                  # rad\n\
float64 DirContribution                  # rad\n\
geometry_msgs/Pose CurrentPose\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of position and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::control::ControlDebug_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::control::ControlDebug_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.CurrentSpeed);
      stream.next(m.TargetSpeed);
      stream.next(m.SpeedError);
      stream.next(m.AccelerationCmd);
      stream.next(m.Curvature);
      stream.next(m.LatError);
      stream.next(m.DirError);
      stream.next(m.SteeringAngleCmd);
      stream.next(m.CurvatureContribution);
      stream.next(m.LatContribution);
      stream.next(m.DirContribution);
      stream.next(m.CurrentPose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlDebug_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::control::ControlDebug_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::control::ControlDebug_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "CurrentSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.CurrentSpeed);
    s << indent << "TargetSpeed: ";
    Printer<double>::stream(s, indent + "  ", v.TargetSpeed);
    s << indent << "SpeedError: ";
    Printer<double>::stream(s, indent + "  ", v.SpeedError);
    s << indent << "AccelerationCmd: ";
    Printer<double>::stream(s, indent + "  ", v.AccelerationCmd);
    s << indent << "Curvature: ";
    Printer<double>::stream(s, indent + "  ", v.Curvature);
    s << indent << "LatError: ";
    Printer<double>::stream(s, indent + "  ", v.LatError);
    s << indent << "DirError: ";
    Printer<double>::stream(s, indent + "  ", v.DirError);
    s << indent << "SteeringAngleCmd: ";
    Printer<double>::stream(s, indent + "  ", v.SteeringAngleCmd);
    s << indent << "CurvatureContribution: ";
    Printer<double>::stream(s, indent + "  ", v.CurvatureContribution);
    s << indent << "LatContribution: ";
    Printer<double>::stream(s, indent + "  ", v.LatContribution);
    s << indent << "DirContribution: ";
    Printer<double>::stream(s, indent + "  ", v.DirContribution);
    s << indent << "CurrentPose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.CurrentPose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROL_MESSAGE_CONTROLDEBUG_H
